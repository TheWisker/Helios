#!/hint/bash
# shellcheck disable=2034

# <==============================================================>

#   ███╗   ███╗ █████╗ ██╗  ██╗███████╗██████╗ ██╗  ██╗ ██████╗
#   ████╗ ████║██╔══██╗██║ ██╔╝██╔════╝██╔══██╗██║ ██╔╝██╔════╝
#   ██╔████╔██║███████║█████╔╝ █████╗  ██████╔╝█████╔╝ ██║  ███╗
#   ██║╚██╔╝██║██╔══██║██╔═██╗ ██╔══╝  ██╔═══╝ ██╔═██╗ ██║   ██║
#   ██║ ╚═╝ ██║██║  ██║██║  ██╗███████╗██║     ██║  ██╗╚██████╔╝
#   ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝     ╚═╝  ╚═╝ ╚═════╝

# <==============================================================>
#                       @Author: TheWisker
# <==============================================================>
#                     See man makepkg.conf(5)
# <==============================================================>
#  Source Acquisition:
# <==============================================================>
# The download utilities that makepkg should use to acquire sources
# >> format: 'protocol::agent'
# >> replacements: %u:dowload_url %o:local_filename.part
# <==============================================================>
DLAGENTS=('file::/usr/bin/curl -qgC - -o %o %u'
          'ftp::/usr/bin/curl -qgfC - --ftp-pasv --retry 3 --retry-delay 3 -o %o %u'
          'http::/usr/bin/curl -qgb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'https::/usr/bin/curl -qgb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'rsync::/usr/bin/rsync --no-motd -z %u %o'
          'scp::/usr/bin/scp -C %u %o')
# <==============================================================>
# The package required by makepkg to download VCS sources
# >> format: 'protocol::agent'
# <==============================================================>
VCSCLIENTS=('bzr::breezy'
            'fossil::fossil'
            'git::git'
            'hg::mercurial'
            'svn::subversion')
# <==============================================================>
#  Architecture & Compile Flags:
# <==============================================================>
CARCH="x86_64"
CHOST="x86_64-pc-linux-gnu"
# <==============================================================>
# C FLAGS:
# -march=native: Compile for native architecture, thus, the resulting binary will be generally limited to running in the compiling host
# -O2: Optimization level 2. Caution if Level 3: Could result in undefined behavior (UB). The code is at fault and should be fixed
# -pipe: Tells the compiler to use pipes instead of temporary files during the different stages of compilation, making the compilation process faster
# -fomit-frame-pointer: Flag designed to reduce generated code size
# -fno-semantic-interposition: Flag meant to improve code generation quality that can provide greater performance
# -fno-plt: Do not use the PLT for external function calls in position-independent code. Makes code more efficient.
# -fvisibility-inlines-hidden: Make inlined functions hidden to reduce binary size
# -g0: Do not add debugging information
# -Wpedantic -Wformat -Wformat-security: Enabled specified warnings when compiling
# -Werror=format-security: Throw an error when specified warning is triggered
# -fstack-clash-protection: Generate code to prevent stack clash style attacks
# -fcf-protection: Enable code instrumentation of control-flow transfers to increase program security by checking that target addresses of control-flow transfer instructions are valid
# -Wp,-D_FORTIFY_SOURCE=3: Inserts error detection to address memory problems at compile time and run time
# <==============================================================>
CFLAGS="-march=native -O2 -pipe -fomit-frame-pointer -fno-semantic-interposition -fno-plt -fvisibility-inlines-hidden -g0 -Wpedantic -Wformat -Wformat-security -Werror=format-security -fstack-clash-protection -fcf-protection -Wp,-D_FORTIFY_SOURCE=3"
# <==============================================================>
# C++ FLAGS:
# -Wp,-D_GLIBCXX_ASSERTIONS: Run-time bounds checking for strings and containers for additional C++ standard library hardening
# <==============================================================>
CXXFLAGS="$CFLAGS -Wp,-D_GLIBCXX_ASSERTIONS"
# <==============================================================>
# LINKER FLAGS:
# -fuse-ld=mold: Use the mold linker, the fastest of them all
# -Wl,-O3: Optimization level 3
# -Wl,--lto-O3: LTO aggressivenes level 3
# -Wl,--as-needed: Tags dynamic libraries as needed only if they really are
# -Wl,--sort-common: Sorts common symbols by size to prevent gaps between symbols due to alignment constraints
# -Wl,-z,relro: Makes the GOT section read-only before calling program entry point as to mitigate GOT overwrite attacks
# -Wl,-z,now: Resolve all symbols before executing the program code as to mitigate GOT overwrite attacks. Disable lazy binding
# -Wl,-z,pack-relative-relocs: Moves relative relocations from the .rela.dyn section into a new .relr.dyn section with a significantly more compact encoding. This can reduce the size of libraries a lot
# -pthread: Adds support for multithreading with the pthreads library
# <==============================================================>
LDFLAGS="-fuse-ld=mold -Wl,-O3 -Wl,--lto-O3 -Wl,--as-needed -Wl,--sort-common -Wl,-z,relro -Wl,-z,now -Wl,-z,pack-relative-relocs -pthread"
# <==============================================================>
# LINK TIME OPTIMIZATION FLAGS:
# -flto=$(nproc): Enable LTO and use $(nproc) number of threads
# -flto-compression-level=1: Set the compression level to 1
# -fuse-linker-plugin: Use linker plugin as to further enhance the optimizations. Linker must support this.
# <==============================================================>
LTOFLAGS="-flto=$(nproc) -flto-compression-level=1 -fuse-linker-plugin"
# <==============================================================>
# MAKE FLAGS:
# --jobs=$(nproc): Set the number of threads to use to $(nproc)
# <==============================================================>
MAKEFLAGS="--jobs=$(nproc)"
# <==============================================================>
# RUST FLAGS:
# -C target-cpu=native: Compile for native architecture, thus, the resulting binary will be generally limited to running in the compiling host
# -C opt-level=3: Optimization level 3.
# -C lto: Perform Link Time Oprimizations
# -C linker-plugin-lto: Use linker plugin as to further enhance the optimizations. Linker must support this.
# -C link-arg=-fuse-ld=mold: Use the mold linker, the fastes of them all
# <==============================================================>
RUSTFLAGS="-C target-cpu=native -C opt-level=3 -C lto -C linker-plugin-lto -C link-arg=-fuse-ld=mold"
# <==============================================================>
# C DEBUGGING FLAGS:
# -g: Enable adding debugging simbols to the resulting binary
# <==============================================================>
DEBUG_CFLAGS="-g"
# <==============================================================>
# C++ DEBUGGING FLAGS:
# <==============================================================>
DEBUG_CXXFLAGS="$DEBUG_CFLAGS"
# <==============================================================>
#  Build Environment:
# <==============================================================>
# Makepkg defaults: BUILDENV=(!distcc !color !ccache check !sign)
# @ A negated environment option will do the opposite of the comments below.
# >> distcc: Use the Distributed C/C++/ObjC compiler
# >> color:  Colorize output messages
# >> ccache: Use ccache to cache compilation
# >> check:  Run the check() function if present in the PKGBUILD
# >> sign:   Generate PGP signature file
# <==============================================================>
BUILDENV=(!distcc color !ccache check !sign)
# <==============================================================>
# If using DistCC, your MAKEFLAGS will also need modification. In addition,
# specify a space-delimited list of hosts running in the DistCC cluster.
# DISTCC_HOSTS=""
# <==============================================================>
# Specify a directory for package building:
# > Directory in /tmp as it is a tmpfs in RAM that is better
# > suited for heavy-writing operations than, for example, an SSD.
# <==============================================================>
BUILDDIR=/tmp/makepkg/out
# <==============================================================>
#  Global Package Options:
# <==============================================================>
# Makepkg defaults: OPTIONS=(!strip docs libtool staticlibs emptydirs !zipman !purge !debug !lto !autodeps)
# @ A negated option will do the opposite of the comments below.
# >> strip:      Strip symbols from binaries/libraries
# >> docs:       Save doc directories specified by DOC_DIRS
# >> libtool:    Leave libtool (.la) files in packages
# >> staticlibs: Leave static library (.a) files in packages
# >> emptydirs:  Leave empty directories in packages
# >> zipman:     Compress manual (man and info) pages in MAN_DIRS with gzip
# >> purge:      Remove files specified by PURGE_TARGETS
# >> debug:      Add debugging flags as specified in DEBUG_* variables
# >> lto:        Add compile flags for building with link time optimization
# >> autodeps:   Automatically add depends/provides
# <==============================================================>
OPTIONS=(strip docs !libtool !staticlibs emptydirs zipman purge !debug lto)
# <==============================================================>
# >> File integrity checks to use. Valid: md5, sha1, sha224, sha256, sha384, sha512, b2
INTEGRITY_CHECK=(sha256)
# >> Options to be used when stripping binaries. See `man strip' for details.
STRIP_BINARIES="--strip-all"
# >> Options to be used when stripping shared libraries. See `man strip' for details.
STRIP_SHARED="--strip-unneeded"
# >> Options to be used when stripping static libraries. See `man strip' for details.
STRIP_STATIC="--strip-debug"
# >> Manual (man and info) directories to compress (if zipman is specified)
MAN_DIRS=({usr{,/local}{,/share},opt/*}/{man,info})
# >> Doc directories to remove (if !docs is specified)
DOC_DIRS=(usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc})
# >> Files to be removed from all packages (if purge is specified)
PURGE_TARGETS=(usr/{,share}/info/dir .packlist *.pod)
# >> Directory to store source code in for debug packages
DBGSRCDIR="/usr/src/debug"
# >> Prefix and directories for library autodeps
LIB_DIRS=('lib:usr/lib' 'lib32:usr/lib32')
# <==============================================================>
#  Package Output:
# <==============================================================>
# Default: Put built package and cached source in build directory
# <==============================================================>
# >> Destination: specify a fixed directory where all packages will be placed
PKGDEST="$HOME/.pkgs/out"
# >> Source cache: specify a fixed directory where source files will be cached
SRCDEST=/tmp/makepkg/src
# >> Source packages: specify a fixed directory where all src packages will be placed
SRCPKGDEST="$HOME/.pkgs/src"
# >> Log files: specify a fixed directory where all log files will be placed
LOGDEST="$HOME/.pkgs/log"
# >> Packager: name/email of the person or organization building packages
PACKAGER="TheWisker <TheWisker@protonmail.com>"
# >> Specify a key to use for package signing
GPGKEY="15100C171D2061FB9F416CF87FA5D39C367A41DE"
# <==============================================================>
#  Compression Defaults:
# <==============================================================>
COMPRESSLZ4=(lz4 -q)
COMPRESSLZO=(lzop -q)
COMPRESSLRZ=(lrzip -q)
COMPRESSXZ=(xz -c -z -)
COMPRESSLZ=(lzip -c -f)
COMPRESSBZ2=(bzip2 -c -f)
COMPRESSGZ=(gzip -c -f -n)
COMPRESSZ=(compress -c -f)
COMPRESSZST=(zstd -c -T0 --auto-threads=logical -)
# <==============================================================>
#  Extensions Defaults:
# <==============================================================>
PKGEXT='.pkg.tar.zst'
SRCEXT='.src.tar.zst'
# <==============================================================>
#  Other:
# <==============================================================>
# >> Command used to run pacman as root, instead of trying sudo and su
# PACMAN_AUTH=()
# <==============================================================>
#  Set processor scheduling policy to SCHED_IDLE:
# <==============================================================>
if [ "$$" -gt 0 ]; then
    chrt -iap 0 $$ || true
fi
# <==============================================================>